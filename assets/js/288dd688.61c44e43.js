"use strict";(self.webpackChunkbraindance_docs=self.webpackChunkbraindance_docs||[]).push([[267],{3961:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>d});var i=s(4848),c=s(8453);const l={},t="module maxwell_env.py",r={id:"docs/maxwell_env.py",title:"maxwell_env.py",description:"Global Variables",source:"@site/docs/docs/maxwell_env.py.mdx",sourceDirName:"docs",slug:"/docs/maxwell_env.py",permalink:"/brainloop/docs/docs/maxwell_env.py",draft:!1,unlisted:!1,editUrl:"https://github.com/braingeneers/brainloop/docs/docs/maxwell_env.py.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"dummy_zmq_np.py",permalink:"/brainloop/docs/docs/dummy_zmq_np.py"},next:{title:"maxwell_utils.py",permalink:"/brainloop/docs/docs/maxwell_utils.py"}},o={},d=[{value:"<strong>Global Variables</strong>",id:"global-variables",level:2},{value:"<kbd>function</kbd> <code>stim_process</code>",id:"function-stim_process",level:2},{value:"<kbd>function</kbd> <code>find_process_by_port</code>",id:"function-find_process_by_port",level:2},{value:"<kbd>function</kbd> <code>stop_process_using_port</code>",id:"function-stop_process_using_port",level:2},{value:"<kbd>function</kbd> <code>init_maxone</code>",id:"function-init_maxone",level:2},{value:"<kbd>function</kbd> <code>init_maxone_settings</code>",id:"function-init_maxone_settings",level:2},{value:"<kbd>function</kbd> <code>setup_subscribers</code>",id:"function-setup_subscribers",level:2},{value:"<kbd>function</kbd> <code>select_electrodes</code>",id:"function-select_electrodes",level:2},{value:"<kbd>function</kbd> <code>power_cycle_stim_electrodes</code>",id:"function-power_cycle_stim_electrodes",level:2},{value:"<kbd>function</kbd> <code>disconnect_stim_electrodes</code>",id:"function-disconnect_stim_electrodes",level:2},{value:"<kbd>function</kbd> <code>connect_stim_electrodes</code>",id:"function-connect_stim_electrodes",level:2},{value:"<kbd>function</kbd> <code>parse_events_list</code>",id:"function-parse_events_list",level:2},{value:"<kbd>function</kbd> <code>parse_frame</code>",id:"function-parse_frame",level:2},{value:"<kbd>function</kbd> <code>receive_packet</code>",id:"function-receive_packet",level:2},{value:"<kbd>function</kbd> <code>socket_worker</code>",id:"function-socket_worker",level:2},{value:"<kbd>function</kbd> <code>plot_worker</code>",id:"function-plot_worker",level:2},{value:"<kbd>function</kbd> <code>ignore_first_packet</code>",id:"function-ignore_first_packet",level:2},{value:"<kbd>function</kbd> <code>ignore_remaining_packets</code>",id:"function-ignore_remaining_packets",level:2},{value:"<kbd>function</kbd> <code>launch_dummy_server</code>",id:"function-launch_dummy_server",level:2},{value:"<kbd>class</kbd> <code>Config</code>",id:"class-config",level:2},{value:"<kbd>function</kbd> <code>__init__</code>",id:"function-__init__",level:3},{value:"<kbd>function</kbd> <code>get_channels</code>",id:"function-get_channels",level:3},{value:"<kbd>function</kbd> <code>get_channels_for_electrodes</code>",id:"function-get_channels_for_electrodes",level:3},{value:"<kbd>function</kbd> <code>get_electrodes</code>",id:"function-get_electrodes",level:3},{value:"<kbd>function</kbd> <code>get_num_channels</code>",id:"function-get_num_channels",level:3},{value:"<kbd>class</kbd> <code>MaxwellEnv</code>",id:"class-maxwellenv",level:2},{value:"<kbd>function</kbd> <code>__init__</code>",id:"function-__init__-1",level:3},{value:"<kbd>property</kbd> dt",id:"property-dt",level:4},{value:"<kbd>property</kbd> stim_dt",id:"property-stim_dt",level:4},{value:"<kbd>property</kbd> stim_dts",id:"property-stim_dts",level:4},{value:"<kbd>function</kbd> <code>clear_buffer</code>",id:"function-clear_buffer",level:3},{value:"<kbd>function</kbd> <code>close</code>",id:"function-close",level:3},{value:"<kbd>function</kbd> <code>connect_units</code>",id:"function-connect_units",level:3},{value:"<kbd>function</kbd> <code>disconnect_all</code>",id:"function-disconnect_all",level:3},{value:"<kbd>function</kbd> <code>get_observation</code>",id:"function-get_observation",level:3},{value:"<kbd>function</kbd> <code>reset</code>",id:"function-reset",level:3},{value:"<kbd>function</kbd> <code>start</code>",id:"function-start",level:3},{value:"<kbd>function</kbd> <code>step</code>",id:"function-step",level:3},{value:"<kbd>function</kbd> <code>time_elapsed</code>",id:"function-time_elapsed",level:3},{value:"<kbd>class</kbd> <code>MaxwellStim</code>",id:"class-maxwellstim",level:2},{value:"<kbd>function</kbd> <code>__init__</code>",id:"function-__init__-2",level:3},{value:"<kbd>class</kbd> <code>SpikeEvent</code>",id:"class-spikeevent",level:2}];function a(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L0",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsxs)(n.h1,{id:"module-maxwell_envpy",children:[(0,i.jsx)("kbd",{children:"module"})," ",(0,i.jsx)(n.code,{children:"maxwell_env.py"})]})}),"\n",(0,i.jsx)(n.h2,{id:"global-variables",children:(0,i.jsx)(n.strong,{children:"Global Variables"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"fs_ms"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L756",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"function-stim_process",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"stim_process"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"stim_process(\n    stim_process_ready,\n    stim_units,\n    stim_ready,\n    stim_shm_name,\n    env_done,\n    stim_amp=400,\n    stim_length=100,\n    stim_tag='stim'\n)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Params  stim_amp  mV of square wave  stim_length  us for each phase of the square wave"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L810",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"function-find_process_by_port",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"find_process_by_port"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"find_process_by_port(port)\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L819",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"function-stop_process_using_port",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"stop_process_using_port"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"stop_process_using_port(port)\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L834",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"function-init_maxone",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"init_maxone"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"init_maxone(\n    config,\n    stim_electrodes,\n    filt=True,\n    verbose=1,\n    gain=512,\n    cutoff='1Hz',\n    spike_thresh=5,\n    dummy=False\n)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Initialize MaxOne, set electrodes, and setup subscribers."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Args:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"config"})})," (str):  Path to the config file for the electrodes."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"stim_electrodes"})})," (list):  List of electrode numbers to stimulate."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"filt"})})," (bool):  Whether to use the high-pass filter."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"verbose"})})," (int):  Verbosity level. 0: No print statements, 1: Print initialization statements, 2: Print all statements."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"gain"})})," (int):  Gain of the amplifier. Options: 512, 1024, 2048."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"cutoff"})})," (str):  Cutoff frequency of the high-pass filter. Options: '1Hz', '300Hz'."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"spike_thresh"})})," (int):  Threshold for spike detection, in units of standard deviations."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"dummy"})})," (bool):  Whether to use dummy data."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"tuple"})}),":  A tuple containing the subscriber, stimulation units, and stimulation electrodes dictionary."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L866",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"function-init_maxone_settings",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"init_maxone_settings"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"init_maxone_settings(\n    gain=512,\n    amp_gain=512,\n    cutoff='1Hz',\n    spike_thresh=5,\n    verbose=1\n)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Initialize MaxOne and set gain and high-pass filter"}),"\n",(0,i.jsxs)(n.p,{children:["Parameters\n---------- gain : int, ",2048]}),"\n",(0,i.jsx)(n.p,{children:"amp_gain : int"}),"\n",(0,i.jsxs)(n.p,{children:["cutoff : str, ","300Hz"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L901",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"function-setup_subscribers",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"setup_subscribers"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"setup_subscribers(filt, verbose=1)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Setup subscribers for events from MaxOne, this  allows us to read the data from the chip."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L920",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"function-select_electrodes",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"select_electrodes"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"select_electrodes(config, stim_electrodes, verbose=1, dummy=False)\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L977",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"function-power_cycle_stim_electrodes",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"power_cycle_stim_electrodes"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"power_cycle_stim_electrodes(stim_units)\n"})}),"\n",(0,i.jsx)(n.p,{children:'"Power up and down again all the stimulation units. It appears this is needed to equilibrate the electrodes"'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"from maxwell code"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L999",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"function-disconnect_stim_electrodes",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"disconnect_stim_electrodes"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"disconnect_stim_electrodes(stim_units)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Disconnect each stimulation unit in the list."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L1006",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"function-connect_stim_electrodes",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"connect_stim_electrodes"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"connect_stim_electrodes(stim_units)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Connect each stimulation unit in the list."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L1014",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"function-parse_events_list",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"parse_events_list"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"parse_events_list(events_data)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Parse the raw binary events data into a list of SpikeEvent objects."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L1039",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"function-parse_frame",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"parse_frame"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"parse_frame(frame_data)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Parse the binary frame data into an array of floating-point voltages."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L1046",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"function-receive_packet",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"receive_packet"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"receive_packet(subscriber, buffer_size=None)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Use the subscriber to capture the frame and event data from the server. Returns an integer frame_number as well as data buffers for the voltage data frame and the spike events. Also sets the current time."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L1103",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"function-socket_worker",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"socket_worker"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"socket_worker(data_queue, event_queue, subscriber_args)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Worker function that reads from the ZeroMQ socket."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L1115",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"function-plot_worker",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"plot_worker"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"plot_worker(queue)\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L1149",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"function-ignore_first_packet",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"ignore_first_packet"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"ignore_first_packet(subscriber, verbose=1)\n"})}),"\n",(0,i.jsx)(n.p,{children:"This first loop ignores any partial packets to make sure the real loop gets aligned to an actual frame. First it spins for as long as recv() fails, then it waits for the RCVMORE flag to be False to check that the last partial frame is over."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L1172",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"function-ignore_remaining_packets",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"ignore_remaining_packets"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"ignore_remaining_packets(subscriber, verbose=1)\n"})}),"\n",(0,i.jsx)(n.p,{children:"This function reads and discards all remaining data in the buffer. It uses a non-blocking recv() to ensure that it only reads available data and stops when there are no more packets."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L1192",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h2,{id:"function-launch_dummy_server",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"launch_dummy_server"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"launch_dummy_server(dummy)\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"class-config",children:[(0,i.jsx)("kbd",{children:"class"})," ",(0,i.jsx)(n.code,{children:"Config"})]}),"\n",(0,i.jsx)(n.p,{children:"Class to handle configuration file parsing and management."}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L1226",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h3,{id:"function-__init__",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"__init__"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"__init__(filename)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Initialize the Config object."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Args:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"filename"})})," (str):  Path to the configuration file."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L1247",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h3,{id:"function-get_channels",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"get_channels"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"get_channels()\n"})}),"\n",(0,i.jsx)(n.p,{children:"Get all channels from the configuration."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"list"})}),":  List of channel numbers."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L1265",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h3,{id:"function-get_channels_for_electrodes",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"get_channels_for_electrodes"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"get_channels_for_electrodes(electrodes)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Get channels corresponding to given electrodes."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Args:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"electrodes"})})," (list):  List of electrode numbers."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"list"})}),":  List of corresponding channel numbers."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L1256",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h3,{id:"function-get_electrodes",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"get_electrodes"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"get_electrodes()\n"})}),"\n",(0,i.jsx)(n.p,{children:"Get all electrodes from the configuration."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"list"})}),":  List of electrode numbers."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L1277",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h3,{id:"function-get_num_channels",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"get_num_channels"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"get_num_channels()\n"})}),"\n",(0,i.jsx)(n.p,{children:"Get the total number of channels in the configuration."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"int"})}),":  Number of channels."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"class-maxwellenv",children:[(0,i.jsx)("kbd",{children:"class"})," ",(0,i.jsx)(n.code,{children:"MaxwellEnv"})]}),"\n",(0,i.jsx)(n.p,{children:"The MaxwellEnv class extends from the BaseEnv class and implements a specific environment  for running experiments on MaxWell's MaxOne system. This class is used to interact with the MaxOne system, receive data, and send stimulation commands."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Attributes:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"config"})})," (str):  Stores the config filepath in order to easily reload the array."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"name"})})," (str):  Stores the name of the environment instance."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"max_time_sec"})})," (int):  Stores the maximum experiment time."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"save_file"})})," (str):  The file where the data will be saved."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"stim_electrodes"})})," (list):  Stores the list of electrodes for stimulation."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"verbose"})})," (int):  Controls the verbosity of the environment's operations."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"array"})})," (None):  Initialized as None, to be updated in sub-classes as needed."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"subscriber"})})," (None):  Initialized as None, to be updated in sub-classes as needed."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"save_dir"})})," (str):  Stores the directory where the simulation data will be saved."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"is_stimulation"})})," (bool):  A flag that indicates whether a stimulation is going to occur."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"stim_log_file"})})," (str or None):  The file where the log of the stimulation is saved. If no stimulation is going to occur, this is None."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"stim_units"})})," (None):  Initialized as None, to be updated in sub-classes as needed."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"stim_electrodes_dict"})})," (None):  Initialized as None, to be updated in sub-classes as needed."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"start_time"})})," (float):  The time when the environment is initialized."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"cur_time"})})," (float):  The current time, updated at each step."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"last_stim_time"})})," (float):  The time when the last stimulation occurred."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"smoke_test"})})," (bool):  A flag that indicates whether the environment is being used for a smoke test."]}),"\n"]}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L69",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h3,{id:"function-__init__-1",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"__init__"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"__init__(\n    config,\n    name='',\n    stim_electrodes=[],\n    max_time_sec=60,\n    save_dir='data',\n    multiprocess=False,\n    render=False,\n    filt=False,\n    observation_type='spikes',\n    verbose=1,\n    smoke_test=False,\n    dummy=None,\n    start=True\n)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Initialize the Maxwell environment."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Args:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"config"})})," (str):  A path to the maxwell config file. This is usually made by the Maxwell GUI,   and contains the information about the array."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"name"})})," (str):  The name of the environment instance. This is used for saving data."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"stim_electrodes"})})," (list):  A list of electrodes for stimulation. If no electrodes are specified, no stimulation will occur."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"max_time_sec"})})," (int):  The maximum experiment time in seconds."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"save_dir"})})," (str):  The directory where the stimulation data will be saved."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"filt"})})," (bool):  A flag that indicates whether a filter should be applied to the data. The filter is onboard the chip,  and is applied to the data before it is sent to the computer. It adds ~100ms of latency."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"observation_type"})})," (str):  A string that indicates the type of observation that the environment should return.  'spikes' returns a list of spike events  'raw' returns the raw datastream frame with shape (ch,1)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"verbose"})})," (int):  An integer that controls the verbosity of the environment's operations. 0 is silent, 1 is verbose."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"smoke_test"})})," (bool):  A flag that indicates whether the environment is being used for a smoke test. If True, the environment  will not save any data, will use dummy logic, and no hardware will be used."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"dummy"})})," (str):  A flag that will indicate whether to use a dummy maxwell server.  'sine' will use a sine wave for the data  ",(0,i.jsx)(n.em,{children:"filepath"})," will use the first 30 seconds of data from the filepath  None will use the real maxwell server"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h4,{id:"property-dt",children:[(0,i.jsx)("kbd",{children:"property"})," dt"]}),"\n",(0,i.jsx)(n.p,{children:"Returns time since the last step."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h4,{id:"property-stim_dt",children:[(0,i.jsx)("kbd",{children:"property"})," stim_dt"]}),"\n",(0,i.jsx)(n.p,{children:"Returns time since last stimulation."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h4,{id:"property-stim_dts",children:[(0,i.jsx)("kbd",{children:"property"})," stim_dts"]}),"\n",(0,i.jsx)(n.p,{children:"Returns time since last stimulation."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L244",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h3,{id:"function-clear_buffer",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"clear_buffer"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"clear_buffer(\n    num_successive_waits=10,\n    min_wait_f=0.5,\n    buffer_size=10,\n    samp_freq_hz=20000\n)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Clear the ZMQ socket buffer, so self.step() returns latest data."}),"\n",(0,i.jsx)(n.p,{children:"This is done by waiting until the time to receive buffer_size frames is at least to min_wait_f*buffer_size for num_successive_waits successive method calls. There are two buffers: the ZMQ socket buffer and  buffer_size used in self.step(buffer_size=buffer_size)."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Args:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"num_successive_waits"})})," (int):  Number of successive waits before considering the buffer cleared."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"min_wait_f"})})," (float):  Minimum wait factor."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"buffer_size"})})," (int):  Size of the buffer."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"samp_freq_hz"})})," (int):  Sampling frequency in Hz."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L407",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h3,{id:"function-close",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"close"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"close()\n"})}),"\n",(0,i.jsx)(n.p,{children:"Shuts down the environment and saves the data."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L669",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h3,{id:"function-connect_units",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"connect_units"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"connect_units(units=None, inds=None)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Connect the specified stimulation units."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L661",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h3,{id:"function-disconnect_all",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"disconnect_all"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"disconnect_all()\n"})}),"\n",(0,i.jsx)(n.p,{children:"Disconnect all stimulation units."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L282",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h3,{id:"function-get_observation",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"get_observation"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"get_observation(buffer_size=None)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Create the observation from the electrodes or spike events."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Args:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"buffer_size"})})," (int, optional):  Size of the buffer for raw data observation."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"list or numpy.ndarray"})}),":  Observation data."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L208",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h3,{id:"function-reset",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"reset"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"reset()\n"})}),"\n",(0,i.jsx)(n.p,{children:"Reset the environment"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L187",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h3,{id:"function-start",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"start"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"start()\n"})}),"\n",(0,i.jsx)(n.p,{children:"Start the experiment by initializing time management, flushing the buffer, and starting the recording."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L332",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h3,{id:"function-step",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"step"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"step(action=None, tag=None, buffer_size=None)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Receive events published since last time step() was called. This includes spike events and raw datastream."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Args:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"action"})})," (list, optional):  A list of stimulation commands. Each command is a tuple of the form   (electrode_index, amplitude_mV, phase_length_us)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"tag"})})," (str, optional):  A tag for the stimulation log."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"buffer_size"})})," (int, optional):  Size of the buffer for observation."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"tuple"})}),":  A tuple containing the observation and a boolean indicating if the episode is done."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L403",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h3,{id:"function-time_elapsed",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"time_elapsed"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"time_elapsed()\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns time since initialization of the environment."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"class-maxwellstim",children:[(0,i.jsx)("kbd",{children:"class"})," ",(0,i.jsx)(n.code,{children:"MaxwellStim"})]}),"\n",(0,i.jsx)(n.p,{children:"Used for stimulating electrodes in a parallel process"}),"\n",(0,i.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/maxwell_env.py#L686",children:(0,i.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,i.jsxs)(n.h3,{id:"function-__init__-2",children:[(0,i.jsx)("kbd",{children:"function"})," ",(0,i.jsx)(n.code,{children:"__init__"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"__init__(stim_units)\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"class-spikeevent",children:[(0,i.jsx)("kbd",{children:"class"})," ",(0,i.jsx)(n.code,{children:"SpikeEvent"})]}),"\n",(0,i.jsx)(n.p,{children:"SpikeEvent(frame, channel, amplitude)"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.em,{children:["This file was automatically generated via ",(0,i.jsx)(n.a,{href:"https://github.com/ml-tooling/lazydocs",children:"lazydocs"}),"."]})})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>r});var i=s(6540);const c={},l=i.createContext(c);function t(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:t(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);