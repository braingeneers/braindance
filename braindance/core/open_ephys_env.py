import flatbuffers
import time

import numpy as np
from open_ephys.control import OpenEphysHTTPServer
import zmq

from braindance.core.base_env import BaseEnv


class OpenEphysEnv(BaseEnv):
    """
    The OpenEphysEnv class extends from the BaseEnv class and implements a specific environment 
    for interacting with Open Ephys. It wraps functionality from Open Ephys to allow communication 
    and control through the Falcon Output plugin.
    
    This is essentially a wrapper of https://github.com/open-ephys/open-ephys-python-tools/tree/main/src/open_ephys/control.
    """

    def __init__(self, max_time_sec=60, verbose=1,
                 ip_address='127.0.0.1', port=3335, start=True):
        """
        Initializes the OpenEphysEnv.

        Args:
            max_time_sec (int, optional): The maximum time in seconds for the environment to run. Defaults to 60.
            verbose (int, optional): Level of verbosity. Defaults to 1.
            ip_address (str, optional): The IP address for the ZMQ connection. Defaults to '127.0.0.1'.
            port (int, optional): The port number that must match the Falcon Output plugin. Defaults to 3335.
            start (bool, optional): If True, starts the recording immediately. Defaults to True.
        """
        super().__init__(max_time_sec=max_time_sec, verbose=verbose)
        self.gui = OpenEphysHTTPServer(ip_address)

        # Initialize ZMQ context and socket
        context = zmq.Context()
        tcp_address = f"tcp://{ip_address}:{port}"
        socket = context.socket(zmq.SUB)
        socket.setsockopt_string(zmq.SUBSCRIBE, "")
        socket.connect(tcp_address)
        self.socket = socket

        if start:
            # Time management
            self.gui.record()
            self.start_time = self.cur_time = time.perf_counter()

    def step(self, action=None):
        """
        Receives data from the Open Ephys system and processes it.

        Args:
            action (None, optional): Placeholder for future action implementations. Currently, this parameter 
                                     must be None.

        Returns:
            tuple: A tuple containing the reshaped 2D array of samples and a boolean indicating 
                   whether the environment is done.

        Raises:
            NotImplementedError: If `action` is set to anything other than None.
        """
        if action is not None:
            raise NotImplementedError(
                "Param `action` is not implemented yet. Set it to None")

        message = self.socket.recv()

        try:
            buf = bytearray(message)
            data = ContinuousData.GetRootAsContinuousData(buf, 0)
        except Exception as e:
            print(f"Impossible to parse the packet received. Error: {e}")
            return np.empty((1, 1)), self._check_if_done()

        num_samples = data.NSamples()
        num_channels = data.NChannels()
        samples_flat = data.SamplesAsNumpy()

        total_elements = samples_flat.size
        expected_elements = num_samples * num_channels

        if total_elements == expected_elements:
            samples_reshaped = samples_flat.reshape(
                (num_channels, num_samples))
            return samples_reshaped.T, self._check_if_done()
        else:
            print(
                f"Error: Expected {expected_elements} elements but got {total_elements}.")
            return np.empty((1, 1)), self._check_if_done()

    def _cleanup(self):
        """
        Cleans up the environment by stopping acquisition and setting the system to idle mode.
        """
        self.gui.acquire()
        self.gui.idle()

    def reset(self):
        """
        Resets the environment. Currently, this method is not implemented.
        """
        pass

    def close(self):
        """
        Closes the environment and performs necessary cleanup operations.
        """
        self._cleanup()


# The below code is taken from https://github.com/open-ephys-plugins/falcon-output/blob/main/clients/Python/ContinuousData.py

# autogenerated flatbuffer, see framework at: https://github.com/open-ephys-plugins/falcon-output/blob/main/clients/C%2B%2B/channel.fbs
# modified to fit indexing for python


class ContinuousData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ContinuousData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsContinuousData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # ContinuousData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ContinuousData
    def Samples(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ContinuousData
    def SamplesAsNumpy(self) -> np.ndarray:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # ContinuousData
    def SamplesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ContinuousData
    def SamplesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # ContinuousData
    def Stream(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ContinuousData
    def NChannels(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(
            self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ContinuousData
    def NSamples(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(
            self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ContinuousData
    def SampleNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(
            self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # ContinuousData
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(
            self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # ContinuousData
    def MessageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(
            self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # ContinuousData
    def SampleRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(
            self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0


def Start(builder): builder.StartObject(8)


def ContinuousDataStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)


def AddSamples(builder, samples): builder.PrependUOffsetTRelativeSlot(
    0, flatbuffers.number_types.UOffsetTFlags.py_type(samples), 0)


def ContinuousDataAddSamples(builder, samples):
    """This method is deprecated. Please switch to AddSamples."""
    return AddSamples(builder, samples)


def StartSamplesVector(
    builder, numElems): return builder.StartVector(4, numElems, 4)


def ContinuousDataStartSamplesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSamplesVector(builder, numElems)


def AddStream(builder, stream): builder.PrependUOffsetTRelativeSlot(
    1, flatbuffers.number_types.UOffsetTFlags.py_type(stream), 0)


def ContinuousDataAddStream(builder, stream):
    """This method is deprecated. Please switch to AddStream."""
    return AddStream(builder, stream)


def AddNChannels(builder, nChannels): builder.PrependUint32Slot(
    2, nChannels, 0)


def ContinuousDataAddNChannels(builder, nChannels):
    """This method is deprecated. Please switch to AddNChannels."""
    return AddNChannels(builder, nChannels)


def AddNSamples(builder, nSamples): builder.PrependUint32Slot(3, nSamples, 0)


def ContinuousDataAddNSamples(builder, nSamples):
    """This method is deprecated. Please switch to AddNSamples."""
    return AddNSamples(builder, nSamples)


def AddSampleNum(builder, sampleNum): builder.PrependUint64Slot(
    4, sampleNum, 0)


def ContinuousDataAddSampleNum(builder, sampleNum):
    """This method is deprecated. Please switch to AddSampleNum."""
    return AddSampleNum(builder, sampleNum)


def AddTimestamp(builder, timestamp): builder.PrependFloat64Slot(
    5, timestamp, 0.0)


def ContinuousDataAddTimestamp(builder, timestamp):
    """This method is deprecated. Please switch to AddTimestamp."""
    return AddTimestamp(builder, timestamp)


def AddMessageId(builder, messageId): builder.PrependUint64Slot(
    6, messageId, 0)


def ContinuousDataAddMessageId(builder, messageId):
    """This method is deprecated. Please switch to AddMessageId."""
    return AddMessageId(builder, messageId)


def AddSampleRate(builder, sampleRate): builder.PrependUint32Slot(
    7, sampleRate, 0)


def ContinuousDataAddSampleRate(builder, sampleRate):
    """This method is deprecated. Please switch to AddSampleRate."""
    return AddSampleRate(builder, sampleRate)


def End(builder): return builder.EndObject()


def ContinuousDataEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
