"use strict";(self.webpackChunkbraindance_docs=self.webpackChunkbraindance_docs||[]).push([[326],{2958:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var s=t(4848),r=t(8453);const i={sidebar_position:3},o="Real-time Application (Online Use)",l={id:"RT-sort/usage/real-time-application",title:"Real-time Application (Online Use)",description:"Once you have detected sequences, you can use RT-Sort for real-time applications. Here's how to do it:",source:"@site/docs/RT-sort/usage/real-time-application.md",sourceDirName:"RT-sort/usage",slug:"/RT-sort/usage/real-time-application",permalink:"/BrainLoop/docs/RT-sort/usage/real-time-application",draft:!1,unlisted:!1,editUrl:"https://github.com/braingeneers/brainloop/docs/RT-sort/usage/real-time-application.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Sequence Detection (Offline Use)",permalink:"/BrainLoop/docs/RT-sort/usage/sequence-detection"},next:{title:"Training Your Own Detection Models",permalink:"/BrainLoop/docs/RT-sort/usage/training-models"}},a={},c=[{value:"Reset the RTSort Object",id:"reset-the-rtsort-object",level:2},{value:"Continuous Sorting",id:"continuous-sorting",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Notes",id:"notes",level:3},{value:"Example with Maxwell MEA",id:"example-with-maxwell-mea",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"real-time-application-online-use",children:"Real-time Application (Online Use)"})}),"\n",(0,s.jsx)(n.p,{children:"Once you have detected sequences, you can use RT-Sort for real-time applications. Here's how to do it:"}),"\n",(0,s.jsx)(n.h2,{id:"reset-the-rtsort-object",children:"Reset the RTSort Object"}),"\n",(0,s.jsx)(n.p,{children:"Before online use, reset the RTSort object:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"rt_sort.reset()\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),": For optimal performance, call ",(0,s.jsx)(n.code,{children:"rt_sort.reset()"})," if more than 50ms have passed since the last ",(0,s.jsx)(n.code,{children:"rt_sort.running_sort(obs)"})," method call."]}),"\n",(0,s.jsx)(n.h2,{id:"continuous-sorting",children:"Continuous Sorting"}),"\n",(0,s.jsx)(n.p,{children:"During online use, continuously call the following method to sort a stream of data:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"sequence_detections = rt_sort.running_sort(obs)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"obs"}),": NumPy array with shape (num_frames, num_electrodes). This should contain only the most recent frames of data."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,s.jsxs)(n.p,{children:["A list where each element is a tuple of length 2 containing the data for a sorted spike in the ",(0,s.jsx)(n.code,{children:"obs"})," recording chunk:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"0th element: ID number of the sequence that the spike was assigned to"}),"\n",(0,s.jsx)(n.li,{children:"1st element: Time the spike occurred (in milliseconds)"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"notes",children:"Notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The first 50ms of data passed as ",(0,s.jsx)(n.code,{children:"obs"})," to ",(0,s.jsx)(n.code,{children:"running_sort"})," is needed to initialize the RTSort object after the last ",(0,s.jsx)(n.code,{children:"rt_sort.reset()"}),", so no spikes will be sorted during this time."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"num_frames"})," must be at least 1 and can be different for each ",(0,s.jsx)(n.code,{children:"running_sort"})," call."]}),"\n",(0,s.jsxs)(n.li,{children:["To minimize sorting latency, ",(0,s.jsx)(n.code,{children:"num_frames"})," should ideally change and be equal to the amount of time that has passed since the last ",(0,s.jsx)(n.code,{children:"running_sort"})," call."]}),"\n",(0,s.jsx)(n.li,{children:"To align with the RT-Sort Methods, use 100 frames for 20kHz MEAs and 150 frames for 30kHz Neuropixels."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example-with-maxwell-mea",children:"Example with Maxwell MEA"}),"\n",(0,s.jsx)(n.p,{children:"Here's an example of how to use RT-Sort with a Maxwell MEA:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from braindance.core.maxwell_env import MaxwellEnv\n\nenv = MaxwellEnv(**params)\ndone = False\nwhile not done:\n    obs, done = env.step()\n    sequence_detections = rt_sort.running_sort(obs)\n    # Process sequence_detections\n"})}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.p,{children:["If you want to customize RT-Sort further, you might be interested in ",(0,s.jsx)(n.a,{href:"training-models",children:"training your own models"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var s=t(6540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);