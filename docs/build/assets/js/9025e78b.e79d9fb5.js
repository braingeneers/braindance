"use strict";(self.webpackChunkbraindance_docs=self.webpackChunkbraindance_docs||[]).push([[237],{541:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var s=t(4848),i=t(8453);const r={},o="module trainer.py",a={id:"docs/trainer.py",title:"trainer.py",description:"---",source:"@site/docs/docs/trainer.py.mdx",sourceDirName:"docs",slug:"/docs/trainer.py",permalink:"/BrainLoop/docs/docs/trainer.py",draft:!1,unlisted:!1,editUrl:"https://github.com/braingeneers/brainloop/docs/docs/trainer.py.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"train.py",permalink:"/BrainLoop/docs/docs/train.py"},next:{title:"utils.py",permalink:"/BrainLoop/docs/docs/utils.py"}},l={},c=[{value:"<kbd>function</kbd> <code>generate_tetanus_pattern</code>",id:"function-generate_tetanus_pattern",level:2},{value:"<kbd>function</kbd> <code>generate_permutations</code>",id:"function-generate_permutations",level:2},{value:"<kbd>function</kbd> <code>generate_stimulations</code>",id:"function-generate_stimulations",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/trainer.py#L0",children:(0,s.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,s.jsx)(n.header,{children:(0,s.jsxs)(n.h1,{id:"module-trainerpy",children:[(0,s.jsx)("kbd",{children:"module"})," ",(0,s.jsx)(n.code,{children:"trainer.py"})]})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/trainer.py#L5",children:(0,s.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,s.jsxs)(n.h2,{id:"function-generate_tetanus_pattern",children:[(0,s.jsx)("kbd",{children:"function"})," ",(0,s.jsx)(n.code,{children:"generate_tetanus_pattern"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"generate_tetanus_pattern(\n    neurons,\n    stim_count=5,\n    delay_ms=5,\n    amp_mv=400,\n    pulse_width=100,\n    random=False,\n    replace=False\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Generates a tetanus pattern for neuron stimulation."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Args:"}),"\nneurons (list): List of neurons. stim_count (int): Number of stimulations at most to use. delay_ms (int): Delay between stimulations in milliseconds. amp_mv (int): Amplitude in millivolts. pulse_width (int): Pulse width. replace (bool): Whether to replace selections."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"}),"\nlist: A sequence of stimulation and delay actions."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/trainer.py#L33",children:(0,s.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,s.jsxs)(n.h2,{id:"function-generate_permutations",children:[(0,s.jsx)("kbd",{children:"function"})," ",(0,s.jsx)(n.code,{children:"generate_permutations"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"generate_permutations(\n    neurons,\n    stim_count=5,\n    delay_ms=5,\n    amp_mv=400,\n    pulse_width=100\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Generates a list of tetanus patterns for all permutations of the given neurons."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Args:"}),"\nneurons (list): List of neurons. stim_count (int): Number of stimulations. delay_ms (int): Delay between stimulations in milliseconds. amp_mv (int): Amplitude in millivolts. pulse_width (int): Pulse width."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"}),"\nlist: A list of sequences, each a unique permutation of stimulation and delay actions."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)("a",{href:"https://github.com/braingeneers/brainloop/blob/main/brainloop/core/trainer.py#L62",children:(0,s.jsx)("img",{align:"right",style:{float:"right"},src:"https://img.shields.io/badge/-source-cccccc?style=flat-square"})}),"\n",(0,s.jsxs)(n.h2,{id:"function-generate_stimulations",children:[(0,s.jsx)("kbd",{children:"function"})," ",(0,s.jsx)(n.code,{children:"generate_stimulations"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"generate_stimulations(electrode_inds, amp=400, phase_width=200)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Creates a list of stimulation commands for the given electrodes with the given amplitude and phase width"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["This file was automatically generated via ",(0,s.jsx)(n.a,{href:"https://github.com/ml-tooling/lazydocs",children:"lazydocs"}),"."]})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);